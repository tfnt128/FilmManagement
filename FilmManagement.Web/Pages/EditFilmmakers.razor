@page "/EditFilmmaker/{filmmakerName}"
@inject FilmmakerAPI filmmakerAPI
@inject NavigationManager navigationManager

<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

    <MudText Class="mt-8" Typo="Typo.h4">Filmmaker Editing</MudText>

    <MudForm>

        <MudTextField Class="mt-4" T="string" Placeholder="Filmmaker's name"
        Variant="Variant.Outlined"
        @bind-Value="name"
        Required="true"
        RequiredError="Required field." />

        <MudTextField Class="mt-4" T="string" Placeholder="Filmmaker's biography"
        Variant="Variant.Outlined"
        @bind-Value="bio"
        Lines="4"
        Required="true"
        RequiredError="Required field." />

        <div class="d-flex align-center justify-space-between mt-4">
            <MudButton Variant="Variant.Filled"
            @onclick="Delete"
            Color="Color.Tertiary"
            Class="ml-auto">
                Delete
            </MudButton>
        </div>
    </MudForm>
</MudPaper>

@code {
    private string? name;
    private string? bio;
    [Parameter]public string? filmmakerName { get; set; }
    public FilmmakerResponse? Filmmaker { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Filmmaker = await filmmakerAPI.GetFilmmakerNameAsync(filmmakerName!);
        name = Filmmaker?.Name;
        bio = Filmmaker?.Bio;
    }

    private async Task Delete()
    {
        await filmmakerAPI.DeleteFilmmakerAsync(Filmmaker!.Id);
        navigationManager.NavigateTo("/Filmmakers");
    }
}
